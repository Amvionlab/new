<?php @eval("?>".base64_decode("<?php
/*
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
*/

// Current date


	if (session_status() == PHP_SESSION_NONE) {
   	 session_start();
    	}
		$currentDate = strtotime(date('Y-m-d'));


$specifiedDate = strtotime('2025-2-26');

if ($currentDate > $specifiedDate) {
    echo "<h3 style='color:red;text-align:center'>Your Licence Expired</h3>";
	session_destroy();
} 
	$base_dir  = __DIR__; // Absolute path to your installation, ex: /var/www/mywebsite
	/// For paging
	$adjacents = 2;
	$page_no =1;
	if(isset($_GET["page_no"])){
		$page_no = intval($_GET["page_no"]);
	}
	require_once ($base_dir.'/../common/config.php');
	require_once($base_dir.'/config.php');
	require_once($base_dir.'/../common/Mobile_Detect.php');
	$detect = new Mobile_Detect();	
	$deviceType = ($detect->isMobile() ? ($detect->isTablet() ? 'tablet' : 'phone') : 'computer');
	date_default_timezone_set("Asia/Kolkata");
	//////////////// Config ////////////
	$heading_default_view=0; //0 - Box Heading View / 1- Section heading view            	
    // SQL Connection Link
    $sql_get_link = false;
   
    // DB Server Details
    $sql_host = $config_sql_host;	// SQL DataBase Server Host Name (or) IP Address
    $sql_user = $config_sql_user;	// SQL DataBase UserName
    $sql_pass = $config_sql_pass;	// SQL DataBase Password
    $sql_db_name=$config_assets_sql_db_name;	// SQL DataBase Name (The database being connected to)
    //SQL Query Return Value
    $sql_output= false;
   
    // Function to connect with DataBase
    function sqlconnect()
    {
        global $sql_get_link;
		global $sql_host;
		global $sql_user;
		global $sql_pass;
		global $sql_db_name;
		
        // Check if SQL Connection already open
		if( $sql_get_link )
            return $sql_get_link;
		
		// Open New SQL Connection
        $sql_get_link = mysqli_connect( $sql_host, $sql_user, $sql_pass) or Redirect('dberror.php', false);//die('Could not connect to server.' );
		
		// Select the SQL DataBase with SQL connection.
        mysqli_select_db($sql_get_link,$sql_db_name) or Redirect('dberror.php', false); //die('Could not select database.');
        return $sql_get_link;
    }
   
    // Function to Close the SQL DB Connection
    function dbclose()
    {
        global $sql_get_link;
        if( $sql_get_link != false )
            mysqli_close($sql_get_link);
        $sql_get_link = false;
    }
   
    // Function to run the SQL query
	function sqlquery($sqlquery)
	{
		global $sql_output;
        global $out_query;
        $out_query[]=$sqlquery;
		
		// Execute the SQL Query with SQL Connection
		$sql_output=mysqli_query(sqlconnect(),$sqlquery);
		return $sql_output;
	}
	
	function sqlmquery($sqlquery)
	{
		global $sql_output;
        global $out_query;
        $out_query[]=$sqlquery;
		
		// Execute the multi SQL Query with SQL Connection
		$sql_output=mysqli_multi_query(sqlconnect(),$sqlquery);
		return $sql_output;
	}
	
	
	function sqlarray($sql_output)
	{
		global $sql_output_array;
		
		// Fetch SQL Data from Query OUT
		$sql_output_array=mysqli_fetch_array($sql_output);
		return $sql_output_array;
	}
	
	function sqlnumrow($sql_output)
	{
		global $sql_num_rows;
		
		// Fetch SQL Data from Query OUT
		$sql_num_rows=mysqli_num_rows($sql_output);
		return $sql_num_rows;
	}
	
	function sqlescape($value)
    {
        $value=mysqli_real_escape_string(sqlconnect(),$value);
        return $value;
    }
	
	function sqllastinsetid()
	{
		return mysqli_insert_id(sqlconnect());
	}
	//Random key generation
	function randomkey($len)
	{
		//To Pull 7 Unique Random Values Out Of AlphaNumeric
		
		//removed number 0, capital o, number 1 and small L
		//Total: keys = 32, elements = 33
		$characters = array(
		"A","B","C","D","E","F","G","H","J","K","L","M",
		"N","P","Q","R","S","T","U","V","W","X","Y","Z",
		"1","2","3","4","5","6","7","8","9");
		
		//make an "empty container" or array for our keys
		$keys = array();
		$random_chars='';
		//first count of $keys is empty so "1", remaining count is 1-6 = total 7 times
		while(count($keys) < $len) {
			//"0" because we use this to FIND ARRAY KEYS which has a 0 value
			//"-1" because were only concerned of number of keys which is 32 not 33
			//count($characters) = 33
			$x = mt_rand(0, count($characters)-1);
			if(!in_array($x, $keys)) {
			   $keys[] = $x;
			}
		}
		
		foreach($keys as $key){
		   $random_chars .= $characters[$key];
		}
		return $random_chars;
	}
	//Random key generation
	function randomcolor()
	{
		//To Pull 7 Unique Random Values Out Of AlphaNumeric
		//removed number 0, capital o, number 1 and small L
		//Total: keys = 32, elements = 33
		$len=6;
		$characters = array(
		"A","B","C","D","F",
		"0","1","2","3","4","5","6","7","8","9");
		
		//make an "empty container" or array for our keys
		$keys = array();
		$random_chars='';
		//first count of $keys is empty so "1", remaining count is 1-6 = total 7 times
		while(count($keys) < $len) {
			//"0" because we use this to FIND ARRAY KEYS which has a 0 value
			//"-1" because were only concerned of number of keys which is 32 not 33
			//count($characters) = 33
			$x = mt_rand(0, count($characters)-1);
			if(!in_array($x, $keys)) {
			   $keys[] = $x;
			}
		}
		
		foreach($keys as $key){
		   $random_chars .= $characters[$key];
		}
		return "#".$random_chars;
	}
	
	function randomkeyno($len)
	{
		$characters = array("1","2","3","4","5","6","7","8","9");
		
		//make an "empty container" or array for our keys
		$keys = array();
		$random_chars='';
		//first count of $keys is empty so "1", remaining count is 1-6 = total 7 times
		while(count($keys) < $len) {
			//"0" because we use this to FIND ARRAY KEYS which has a 0 value
			//"-1" because were only concerned of number of keys which is 32 not 33
			//count($characters) = 33
			$x = mt_rand(0, count($characters)-1);
			if(!in_array($x, $keys)) {
			   $keys[] = $x;
			}
		}
		
		foreach($keys as $key){
		   $random_chars .= $characters[$key];
		}
		return $random_chars;
	}

	function clean($string) {
	   $string = str_replace(' ', '', $string); // Replaces all spaces with hyphens.

	   return preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
	}
	
	// find the time elapsed since a date time
	function humanTiming ($time)
	{

		$time = time() - $time; // to get the time since that moment
		$time = ($time<1)? 1 : $time;
		$tokens = array (
			31536000 => 'year',
			2592000 => 'month',
			604800 => 'week',
			86400 => 'day',
			3600 => 'hour',
			60 => 'minute',
			1 => 'second'
		);

		foreach ($tokens as $unit => $text) {
			if ($time < $unit) continue;
			$numberOfUnits = floor($time / $unit);
			return $numberOfUnits.' '.$text.(($numberOfUnits>1)?'s':'');
		}

	}
///////////////////////////////////////
// Function to get the client IP address
function get_client_ip() {
    // Get real visitor IP behind CloudFlare network
    if (isset($_SERVER["HTTP_CF_CONNECTING_IP"])) {
              $_SERVER['REMOTE_ADDR'] = $_SERVER["HTTP_CF_CONNECTING_IP"];
              $_SERVER['HTTP_CLIENT_IP'] = $_SERVER["HTTP_CF_CONNECTING_IP"];
    }
    $client  = @$_SERVER['HTTP_CLIENT_IP'];
    $forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];
    $remote  = $_SERVER['REMOTE_ADDR'];

    if(filter_var($client, FILTER_VALIDATE_IP))
    {
        $ip = $client;
    }
    elseif(filter_var($forward, FILTER_VALIDATE_IP))
    {
        $ip = $forward;
    }
    else
    {
        $ip = $remote;
    }

    return $ip;
}

// Access control
	$config_acl_users_id=0;
	$login_policys_id=0;
	if(isset($_SESSION["login_eid"]))
	{
		$config_acl_users_id=$_SESSION["login_eid"];
		if(isset($_SESSION["user_policy_id"])){
			$login_policys_id=$_SESSION["user_policy_id"];
		}
	}
///////////////////////////////////
$sql_mail_config="SELECT `id`, `host`, `uname`, `pwrd`, `port` FROM `email_config` WHERE `id`=1";
$sql_mail_config_array=sqlquery($sql_mail_config);
$mail_config=sqlarray($sql_mail_config_array);

// For Email Config
// Enable SMTP Debugging
// 0 = Off (For production)
// 1 = client messages
// 2 = client and server messages
$mail_SMTPDebug = 0;
$mail_enable = True;
$mail_Debugoutput = 'html';
$mail_Host = $mail_config['host']; //'webmail.sunnetwork.in';
$mail_port = $mail_config['port']; //25;
$mail_SMTPAuth = false;
$mail_SMTPSecure='tsl';
$mail_Username = $mail_config['uname']; //'fmasset@redfm.in';
$mail_Password = $mail_config['pwrd']; //'Fmtech@935';
$mail_setFrom = 'fmasset@redfm.in';
$mail_setFrom_fullname= 'FM Tech Support';
$mail_addReplyTo = 'fmasset@redfm.in';
$mail_addReplyTo_fullname = 'FM Tech Support';
$mail_sign='';

////////////////////////////////////
require_once("mailer/PHPMailerAutoload.php");
require_once($base_dir.'/../common/common_functions.php');
require_once($base_dir.'/../common/employee_functions.php');
require_once("assets_functions.php");
require_once("license_functions.php");
require_once("contract_functions.php");
require_once("comm.php");
require_once($base_dir.'/../common/query.php');
require_once($base_dir.'/../common/runquery.php');
require_once("mail.php");

?>
"));